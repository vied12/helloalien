// Generated by CoffeeScript 1.6.1
var Format, URL, Utils, Widget, start,
  _this = this,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.nasa = {};

Widget = window.serious.Widget;

URL = new window.serious.URL();

Format = window.serious.format;

Utils = window.serious.Utils;

nasa.ContribMap = (function(_super) {

  __extends(ContribMap, _super);

  function ContribMap() {
    var _this = this;
    this.onMapInitialized = function(mapInstance) {
      return ContribMap.prototype.onMapInitialized.apply(_this, arguments);
    };
    this.onMapInitError = function(data) {
      return ContribMap.prototype.onMapInitError.apply(_this, arguments);
    };
    this.onContribReceived = function(data) {
      return ContribMap.prototype.onContribReceived.apply(_this, arguments);
    };
    this.randomNegative = function() {
      return ContribMap.prototype.randomNegative.apply(_this, arguments);
    };
    this.checkUpdate = function() {
      return ContribMap.prototype.checkUpdate.apply(_this, arguments);
    };
    this.createLocation = function(contrib) {
      return ContribMap.prototype.createLocation.apply(_this, arguments);
    };
    this.addLocation = function(map, location, key) {
      return ContribMap.prototype.addLocation.apply(_this, arguments);
    };
    this.getLastContribs = function() {
      return ContribMap.prototype.getLastContribs.apply(_this, arguments);
    };
    this.simulateBehavior = function() {
      return ContribMap.prototype.simulateBehavior.apply(_this, arguments);
    };
    this.bindUI = function() {
      return ContribMap.prototype.bindUI.apply(_this, arguments);
    };
    this.UIS = {
      cMap: '#sphere',
      locations: '#locations'
    };
    this.ACTIONS = [];
    this.MapAPI = null;
    this.locations = {};
  }

  ContribMap.prototype.bindUI = function() {
    ContribMap.__super__.bindUI.apply(this, arguments);
    this.uis.cMap.earth3d({
      texture: '/static/images/earth1024x1024.jpg',
      dragElement: this.uis.locations,
      locationsElement: this.uis.locations,
      onCreated: this.onMapInitialized
    });
    this.getLastContribs();
    return this.checkUpdate();
  };

  ContribMap.prototype.simulateBehavior = function() {
    var key, location, locations, timeout, _results;
    locations = {
      obj1: {
        alpha: Math.PI / 4,
        delta: 0,
        name: 'location 1'
      },
      obj2: {
        alpha: 1 * Math.PI / 4,
        delta: -2 * Math.PI / 4,
        name: 'location 2'
      },
      obj3: {
        alpha: 2 * Math.PI / 4,
        delta: 0,
        name: 'location 3'
      },
      obj4: {
        alpha: 3 * Math.PI / 4,
        delta: 3 * Math.PI / 4,
        name: 'location 4'
      }
    };
    timeout = 1000;
    _results = [];
    for (key in locations) {
      location = locations[key];
      _results.push((function(location, key, self, timeout) {
        timeout += 1000;
        return window.setTimeout(self.addLocation, timeout, self.MapAPI, location, key);
      })(location, key, this, timeout));
    }
    return _results;
  };

  ContribMap.prototype.getLastContribs = function() {
    return $.ajax({
      url: '/api/map',
      type: 'GET',
      dataType: 'json',
      success: this.onContribReceived,
      error: console.log
    });
  };

  ContribMap.prototype.addLocation = function(map, location, key) {
    map.options.locations[key] = location;
    location.visible = true;
    return map.options.onInitLocation(location, map);
  };

  ContribMap.prototype.createLocation = function(contrib) {
    var lat, lng, location;
    lat = Math.round(Math.random() * 3) * Math.PI / 4;
    lng = Math.round(Math.random() * 3) * Math.PI / 4;
    return location = {
      key: contrib._id['$oid'],
      alpha: lng,
      delta: lat,
      name: contrib._id['$oid']
    };
  };

  ContribMap.prototype.checkUpdate = function() {};

  ContribMap.prototype.randomNegative = function() {
    var factor, neg;
    neg = Math.floor(Math.random());
    if (neg === 0) {
      factor = 1;
    } else {
      factor = -1;
    }
    return factor;
  };

  ContribMap.prototype.onContribReceived = function(data) {
    var contrib, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      contrib = data[_i];
      _results.push((function(self, locations, contrib) {
        var location;
        location = self.createLocation(contrib);
        if (self.locations[location.key] === void 0) {
          self.locations[location.key] = location;
          return self.addLocation(self.MapAPI, location, location.key);
        }
      })(this, locations, contrib));
    }
    return _results;
  };

  ContribMap.prototype.onMapInitError = function(data) {
    return console.error("An error occured while initliazing google earth: ", data);
  };

  ContribMap.prototype.onMapInitialized = function(mapInstance) {
    return this.MapAPI = mapInstance;
  };

  return ContribMap;

})(Widget);

nasa.ContribForm = (function(_super) {

  __extends(ContribForm, _super);

  function ContribForm() {
    var _this = this;
    this.sendMedia = function(type, value) {
      return ContribForm.prototype.sendMedia.apply(_this, arguments);
    };
    this.sendSound = function() {
      return ContribForm.prototype.sendSound.apply(_this, arguments);
    };
    this.sendImage = function() {
      return ContribForm.prototype.sendImage.apply(_this, arguments);
    };
    this.hasGetUserMedia = function() {
      return ContribForm.prototype.hasGetUserMedia.apply(_this, arguments);
    };
    this.snapshot = function() {
      return ContribForm.prototype.snapshot.apply(_this, arguments);
    };
    this.initVideo = function() {
      return ContribForm.prototype.initVideo.apply(_this, arguments);
    };
    this.onFailSoHard = function(e) {
      return ContribForm.prototype.onFailSoHard.apply(_this, arguments);
    };
    this.hasGetUserMedia = function() {
      return ContribForm.prototype.hasGetUserMedia.apply(_this, arguments);
    };
    this.bindFields = function() {
      return ContribForm.prototype.bindFields.apply(_this, arguments);
    };
    this.initForm = function() {
      return ContribForm.prototype.initForm.apply(_this, arguments);
    };
    this.bindUI = function(ui) {
      return ContribForm.prototype.bindUI.apply(_this, arguments);
    };
    this.UIS = {
      form: "form",
      imageZone: "#imageZone",
      imageFile: "#id_image",
      soundZone: "#soundZone",
      soundFile: "#id_sound",
      video: "video",
      canvas: "canvas",
      image: "img.avatar"
    };
    this.cache = {
      imageZone: null,
      soundZone: null
    };
    this.ACTIONS = ['snapshot', 'sendImage', 'sendSound'];
  }

  ContribForm.prototype.bindUI = function(ui) {
    ContribForm.__super__.bindUI.apply(this, arguments);
    return this.initForm();
  };

  ContribForm.prototype.initForm = function() {
    this.initVideo();
    return this.bindFields();
  };

  ContribForm.prototype.bindFields = function() {
    this.uis.imageFile.change(this.sendImage);
    return this.uis.soundFile.change(this.sendSound);
  };

  ContribForm.prototype.hasGetUserMedia = function() {
    return !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
  };

  ContribForm.prototype.onFailSoHard = function(e) {
    return console.log('Reeeejected!');
  };

  ContribForm.prototype.initVideo = function() {
    var _this = this;
    if (!this.hasGetUserMedia()) {
      alert('no');
    }
    window.URL = window.URL || window.webkitURL;
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    if (navigator.getUserMedia) {
      return navigator.getUserMedia({
        video: true
      }, (function(localMediaStream) {
        var my_url;
        my_url = window.webkitURL || window.URL;
        _this.uis.video.attr('src', my_url.createObjectURL(localMediaStream));
        _this.localMediaStream = localMediaStream;
        return _this.uis.video.get().onloadedmetadata = console.log;
      }), this.onFailSoHard);
    } else {
      return this.uis.video.attr('src', 'somevideo.webm');
    }
  };

  ContribForm.prototype.snapshot = function() {
    var $form, ctx, form;
    ctx = this.uis.canvas[0].getContext('2d');
    if (this.localMediaStream) {
      ctx.drawImage(this.uis.video[0], 0, 0);
      this.uis.image.attr('src', this.uis.canvas[0].toDataURL('image/webp'));
      this.uis.image.removeClass("hidden");
      $form = $("<form enctype=\"multipart/form-data\"></form>");
      form = new FormData($form[0]);
      form.append("avatar", this.uis.canvas[0].toDataURL('image/webp'));
      return $.ajax({
        url: "/api/upload/avatar",
        type: 'POST',
        success: console.log,
        error: !console || console.log,
        data: form,
        cache: false,
        contentType: false,
        processData: false,
        xhr: function() {
          return $.ajaxSettings.xhr();
        }
      });
    }
  };

  ContribForm.prototype.hasGetUserMedia = function() {
    return !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
  };

  ContribForm.prototype.sendImage = function() {
    return this.sendMedia('picture', this.uis.imageFile);
  };

  ContribForm.prototype.sendSound = function() {
    return this.sendMedia('audio', this.uis.soundFile);
  };

  ContribForm.prototype.sendMedia = function(type, value) {
    var $form, form;
    $form = $("<form enctype=\"multipart/form-data\"></form>");
    form = new FormData($form[0]);
    form.append(type, value.prop("files")[0]);
    return $.ajax({
      url: "/api/upload/" + type,
      type: 'POST',
      success: console.log,
      error: !console || console.log,
      data: form,
      cache: false,
      contentType: false,
      processData: false,
      xhr: function() {
        return $.ajaxSettings.xhr();
      }
    });
  };

  return ContribForm;

})(Widget);

nasa.Navigation = (function(_super) {

  __extends(Navigation, _super);

  function Navigation() {
    var _this = this;
    this.relayout = function() {
      return Navigation.prototype.relayout.apply(_this, arguments);
    };
    this.initPositions = function() {
      return Navigation.prototype.initPositions.apply(_this, arguments);
    };
    this.init = function() {
      return Navigation.prototype.init.apply(_this, arguments);
    };
    this.bindUI = function(ui) {
      return Navigation.prototype.bindUI.apply(_this, arguments);
    };
    this.UIS = {
      wrapper: '.wrapper',
      slides: '.slide',
      nextButtons: '.next'
    };
    this.cache = {
      activeSlide: 0
    };
  }

  Navigation.prototype.bindUI = function(ui) {
    var _this = this;
    Navigation.__super__.bindUI.apply(this, arguments);
    this.initPositions();
    this.relayout();
    $(window).on('resize', this.relayout);
    return this.uis.nextButtons.each(function(idx, el) {
      return $(el).click(function() {
        var nextPos, nextSlide;
        nextPos = parseInt($(el).parents('.slide').attr('data-position')) + 1;
        nextSlide = $('.slide[data-position=' + nextPos + ']');
        $('html,body').animate({
          scrollTop: nextSlide.offset().top
        });
        return _this.cache.activeSlide = parseInt(nextPos);
      });
    });
  };

  Navigation.prototype.init = function() {
    return $('html,body').scrollTop(0);
  };

  Navigation.prototype.initPositions = function() {
    var slide, slideIdx, _i, _len, _ref, _results;
    slideIdx = 0;
    _ref = this.uis.slides;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      slide = _ref[_i];
      slide = $(slide);
      slide.attr('data-position', slideIdx);
      _results.push(slideIdx++);
    }
    return _results;
  };

  Navigation.prototype.relayout = function() {
    var activeSlide, height, slide, _i, _len, _ref;
    height = $(window).height();
    this.uis.slides.height(height);
    this.ui.find('.autoHeight').height(height);
    this.uis.slides.width($(window).width());
    _ref = this.uis.slides;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      slide = _ref[_i];
      slide = $(slide);
      slide.css("top", slide.attr('data-position') * height);
    }
    activeSlide = this.ui.find('.slide[data-position=' + this.cache.activeSlide + ']');
    return $('html,body').scrollTop(this.cache.activeSlide * height);
  };

  return Navigation;

})(Widget);

nasa.ImageSlider = (function(_super) {

  __extends(ImageSlider, _super);

  function ImageSlider() {
    var _this = this;
    this.start = function() {
      return ImageSlider.prototype.start.apply(_this, arguments);
    };
    this.setImage = function(img) {
      return ImageSlider.prototype.setImage.apply(_this, arguments);
    };
    this.bindUI = function() {
      return ImageSlider.prototype.bindUI.apply(_this, arguments);
    };
    this.UIS = {
      image: 'img'
    };
    this.images = [];
    this.currentImageIndex = 0;
  }

  ImageSlider.prototype.bindUI = function() {
    var _this = this;
    ImageSlider.__super__.bindUI.apply(this, arguments);
    return $.getJSON('/api/pictures', function(data) {
      _this.images = data;
      return _this.start();
    });
  };

  ImageSlider.prototype.setImage = function(img) {
    return this.uis.image.attr('src', img);
  };

  ImageSlider.prototype.start = function() {
    var url_img,
      _this = this;
    if (this.images.length <= this.currentImageIndex + 1) {
      this.currentImageIndex = 0;
    }
    url_img = this.images[this.currentImageIndex];
    return $("<img/>").attr('src', url_img).load(function() {
      _this.setImage(url_img);
      _this.currentImageIndex += 1;
      return setTimeout(_this.start, 1000);
    });
  };

  return ImageSlider;

})(Widget);

start = function() {
  return $(window).load(function() {
    return Widget.bindAll();
  });
};

start();
